{"ast":null,"code":"const {\n  createHash,\n  randomBytes\n} = require(\"crypto\");\n/** Generate cryptographically secure random string\n * @param {number} size The desired length of the string\n * @param {string} mask A mask of characters (no more than 256) to choose from\n * @returns {string} The random string\n */\n\n\nfunction random(size, mask) {\n  let result = \"\";\n  const randomIndices = randomBytes(size);\n  const byteLength = Math.pow(2, 8); // 256\n\n  const maskLength = Math.min(mask.length, byteLength); // the scaling factor breaks down the possible values of bytes (0x00-0xFF)\n  // into the range of mask indices\n\n  const scalingFactor = byteLength / maskLength;\n\n  for (let i = 0; i < size; i++) {\n    const randomIndex = Math.floor(randomIndices[i] / scalingFactor);\n    result += mask[randomIndex];\n  }\n\n  return result;\n}\n/** Base64 url encode a string\n * @param {string} base64 The base64 string to url encode\n * @returns {string} The base64 url encoded string\n */\n\n\nfunction base64UrlEncode(base64) {\n  return base64.replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n/** Generate a PKCE challenge verifier\n * @param {number} length Length of the verifier\n * @returns {string} A random verifier `length` characters long\n */\n\n\nfunction generateVerifier(length) {\n  const mask = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~\";\n  return random(length, mask);\n}\n/** Generate a PKCE challenge code from a verifier\n * @param {string} code_verifier\n * @returns {string} The base64 url encoded code challenge\n */\n\n\nfunction generateChallenge(code_verifier) {\n  const hash = createHash(\"sha256\").update(code_verifier).digest(\"base64\");\n  return base64UrlEncode(hash);\n}\n/** Generate a PKCE challenge pair\n * @param {number} [length=43] Length of the verifer (between 43-128)\n * @returns {{code_challenge:string,code_verifier:string}} PKCE challenge pair\n */\n\n\nfunction pkceChallenge(length) {\n  if (!length) length = 43;\n\n  if (length < 43 || length > 128) {\n    throw `Expected a length between 43 and 128. Received ${length}.`;\n  }\n\n  const verifier = generateVerifier(length);\n  const challenge = generateChallenge(verifier);\n  return {\n    code_challenge: challenge,\n    code_verifier: verifier\n  };\n}\n\nmodule.exports = pkceChallenge;\n/** Verify that a code_verifier produces the expected code challenge\n * @param {string} code_verifier\n * @param {string} expectedChallenge The code challenge to verify\n * @returns {boolean} True if challenges are equal. False otherwise.\n */\n\nfunction verifyChallenge(code_verifier, expectedChallenge) {\n  const actualChallenge = generateChallenge(code_verifier);\n  return actualChallenge === expectedChallenge;\n}\n\nmodule.exports.verifyChallenge = verifyChallenge;\nmodule.exports.generateChallenge = generateChallenge;","map":{"version":3,"sources":["/Users/rohith/Desktop/react-auth0/node_modules/pkce-challenge/index.js"],"names":["createHash","randomBytes","require","random","size","mask","result","randomIndices","byteLength","Math","pow","maskLength","min","length","scalingFactor","i","randomIndex","floor","base64UrlEncode","base64","replace","generateVerifier","generateChallenge","code_verifier","hash","update","digest","pkceChallenge","verifier","challenge","code_challenge","module","exports","verifyChallenge","expectedChallenge","actualChallenge"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,UAAF;AAAcC,EAAAA;AAAd,IAA8BC,OAAO,CAAC,QAAD,CAA3C;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4B;AAC1B,MAAIC,MAAM,GAAG,EAAb;AACA,QAAMC,aAAa,GAAGN,WAAW,CAACG,IAAD,CAAjC;AACA,QAAMI,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,CAAZ,CAAnB,CAH0B,CAGS;;AACnC,QAAMC,UAAU,GAAGF,IAAI,CAACG,GAAL,CAASP,IAAI,CAACQ,MAAd,EAAsBL,UAAtB,CAAnB,CAJ0B,CAK1B;AACA;;AACA,QAAMM,aAAa,GAAGN,UAAU,GAAGG,UAAnC;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,IAApB,EAA0BW,CAAC,EAA3B,EAA+B;AAC7B,UAAMC,WAAW,GAAGP,IAAI,CAACQ,KAAL,CAAWV,aAAa,CAACQ,CAAD,CAAb,GAAmBD,aAA9B,CAApB;AACAR,IAAAA,MAAM,IAAID,IAAI,CAACW,WAAD,CAAd;AACD;;AACD,SAAOV,MAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASY,eAAT,CAAyBC,MAAzB,EAAiC;AAC/B,SAAOA,MAAM,CACVC,OADI,CACI,IADJ,EACU,EADV,EAEJA,OAFI,CAEI,KAFJ,EAEW,GAFX,EAGJA,OAHI,CAGI,KAHJ,EAGW,GAHX,CAAP;AAID;AAED;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,CAA0BR,MAA1B,EAAkC;AAChC,QAAMR,IAAI,GACR,oEADF;AAEA,SAAOF,MAAM,CAACU,MAAD,EAASR,IAAT,CAAb;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASiB,iBAAT,CAA2BC,aAA3B,EAA0C;AACxC,QAAMC,IAAI,GAAGxB,UAAU,CAAC,QAAD,CAAV,CACVyB,MADU,CACHF,aADG,EAEVG,MAFU,CAEH,QAFG,CAAb;AAGA,SAAOR,eAAe,CAACM,IAAD,CAAtB;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASG,aAAT,CAAuBd,MAAvB,EAA+B;AAC7B,MAAI,CAACA,MAAL,EAAaA,MAAM,GAAG,EAAT;;AAEb,MAAIA,MAAM,GAAG,EAAT,IAAeA,MAAM,GAAG,GAA5B,EAAiC;AAC/B,UAAO,kDAAiDA,MAAO,GAA/D;AACD;;AAED,QAAMe,QAAQ,GAAGP,gBAAgB,CAACR,MAAD,CAAjC;AACA,QAAMgB,SAAS,GAAGP,iBAAiB,CAACM,QAAD,CAAnC;AAEA,SAAO;AACLE,IAAAA,cAAc,EAAED,SADX;AAELN,IAAAA,aAAa,EAAEK;AAFV,GAAP;AAID;;AAEDG,MAAM,CAACC,OAAP,GAAiBL,aAAjB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASM,eAAT,CAAyBV,aAAzB,EAAwCW,iBAAxC,EAA2D;AACzD,QAAMC,eAAe,GAAGb,iBAAiB,CAACC,aAAD,CAAzC;AACA,SAAOY,eAAe,KAAKD,iBAA3B;AACD;;AAEDH,MAAM,CAACC,OAAP,CAAeC,eAAf,GAAiCA,eAAjC;AACAF,MAAM,CAACC,OAAP,CAAeV,iBAAf,GAAmCA,iBAAnC","sourcesContent":["const { createHash, randomBytes } = require(\"crypto\");\n\n/** Generate cryptographically secure random string\n * @param {number} size The desired length of the string\n * @param {string} mask A mask of characters (no more than 256) to choose from\n * @returns {string} The random string\n */\nfunction random(size, mask) {\n  let result = \"\";\n  const randomIndices = randomBytes(size);\n  const byteLength = Math.pow(2, 8); // 256\n  const maskLength = Math.min(mask.length, byteLength);\n  // the scaling factor breaks down the possible values of bytes (0x00-0xFF)\n  // into the range of mask indices\n  const scalingFactor = byteLength / maskLength;\n  for (let i = 0; i < size; i++) {\n    const randomIndex = Math.floor(randomIndices[i] / scalingFactor);\n    result += mask[randomIndex];\n  }\n  return result;\n}\n\n/** Base64 url encode a string\n * @param {string} base64 The base64 string to url encode\n * @returns {string} The base64 url encoded string\n */\nfunction base64UrlEncode(base64) {\n  return base64\n    .replace(/=/g, \"\")\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\");\n}\n\n/** Generate a PKCE challenge verifier\n * @param {number} length Length of the verifier\n * @returns {string} A random verifier `length` characters long\n */\nfunction generateVerifier(length) {\n  const mask =\n    \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~\";\n  return random(length, mask);\n}\n\n/** Generate a PKCE challenge code from a verifier\n * @param {string} code_verifier\n * @returns {string} The base64 url encoded code challenge\n */\nfunction generateChallenge(code_verifier) {\n  const hash = createHash(\"sha256\")\n    .update(code_verifier)\n    .digest(\"base64\");\n  return base64UrlEncode(hash);\n}\n\n/** Generate a PKCE challenge pair\n * @param {number} [length=43] Length of the verifer (between 43-128)\n * @returns {{code_challenge:string,code_verifier:string}} PKCE challenge pair\n */\nfunction pkceChallenge(length) {\n  if (!length) length = 43;\n\n  if (length < 43 || length > 128) {\n    throw `Expected a length between 43 and 128. Received ${length}.`;\n  }\n\n  const verifier = generateVerifier(length);\n  const challenge = generateChallenge(verifier);\n\n  return {\n    code_challenge: challenge,\n    code_verifier: verifier\n  };\n}\n\nmodule.exports = pkceChallenge;\n\n/** Verify that a code_verifier produces the expected code challenge\n * @param {string} code_verifier\n * @param {string} expectedChallenge The code challenge to verify\n * @returns {boolean} True if challenges are equal. False otherwise.\n */\nfunction verifyChallenge(code_verifier, expectedChallenge) {\n  const actualChallenge = generateChallenge(code_verifier);\n  return actualChallenge === expectedChallenge;\n}\n\nmodule.exports.verifyChallenge = verifyChallenge;\nmodule.exports.generateChallenge = generateChallenge;\n"]},"metadata":{},"sourceType":"script"}